<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:c="http://www.springframework.org/schema/c"
  xmlns:p="http://www.springframework.org/schema/p" 
  xmlns:aop="http://www.springframework.org/schema/aop" 
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
  ">

  <bean id="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource" 
    init-method="init" destroy-method="close">
    <property name="driverClassName" value="${jdbc.driver.classname}" />
    <property name="initialSize" value="1" />
    <property name="maxActive" value="50" />
    <property name="minIdle" value="1" />
    <property name="maxWait" value="2000" />
    <property name="validationQuery" value="select 1" />
    <property name="testOnBorrow" value="true" />
    <property name="removeAbandonedTimeout" value="120" />
    <property name="logAbandoned" value="true" />
    <property name="timeBetweenEvictionRunsMillis" value="58000" />
    <property name="minEvictableIdleTimeMillis" value="60000" />
    <property name="filters" value="config" />
    <property name="url" value="${default.jdbc.url}" />
    <property name="username" value="${default.jdbc.username}" />
    <property name="password" value="${default.jdbc.password}" />
  </bean>

  <bean id="secondaryDataSource" class="com.alibaba.druid.pool.DruidDataSource" 
    init-method="init" destroy-method="close">
    <property name="driverClassName" value="${jdbc.driver.classname}" />
    <property name="initialSize" value="1" />
    <property name="maxActive" value="50" />
    <property name="minIdle" value="1" />
    <property name="maxWait" value="2000" />
    <property name="validationQuery" value="select 1" />
    <property name="filters" value="config" />
    <property name="url" value="${secondary.jdbc.url}" />
    <property name="username" value="${secondary.jdbc.username}" />
    <property name="password" value="${secondary.jdbc.password}" />
  </bean>

  <!-- =====================================数据源===================================== -->
  <!-- <bean id="dataSource" class="code.ponfee.commons.data.lookup.MultipletScalableDataSource"> -->
  <bean id="dataSource" class="code.ponfee.commons.data.lookup.MultipletCachedDataSource">
    <constructor-arg>
      <array>
        <!-- 如果字节码没有debug信息的编译（javac -g:none） -->
        <!-- <bean class="code.ponfee.commons.data.NamedDataSource" 
          c:name="default" c:dataSource-ref="defaultDataSource" /> -->
        <bean class="code.ponfee.commons.data.NamedDataSource" 
          c:_0="default" c:_1-ref="defaultDataSource" />
        <bean class="code.ponfee.commons.data.NamedDataSource" 
          c:_0="secondary" c:_1-ref="secondaryDataSource" />
      </array>
    </constructor-arg>
  </bean>

  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="dataSource" />
  </bean>

  <!-- mybatis文件配置，扫描所有mapper xml文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" 
    p:dataSource-ref="dataSource" 
    p:configLocation="classpath:/mybatis-conf.xml" 
    p:mapperLocations="classpath*:cn/ponfee/web/framework/dao/xml/*.xml" 
    p:typeAliasesPackage="cn.ponfee.web.framework.model" />

  <!-- sqlMapper -->
  <bean class="code.ponfee.commons.mybatis.SqlMapper">
    <constructor-arg>
      <bean class="org.mybatis.spring.SqlSessionTemplate" c:_0-ref="sqlSessionFactory" />
    </constructor-arg>
  </bean>

  <!-- spring与mybatis整合配置，扫描所有mapper class -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" 
    p:basePackage="cn.ponfee.web.framework.dao.mapper"
    p:sqlSessionFactoryBeanName="sqlSessionFactory" />

  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
    p:dataSource-ref="dataSource" />

  <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate"
    p:transactionManager-ref="txManager" />

  <!-- ======================================事务切面配置====================================== -->
  <!-- <tx:annotation-driven proxy-target-class="true" transaction-manager="txManager" order="9" /> -->

  <tx:advice id="txManageAdvice" transaction-manager="txManager">
    <tx:attributes>
      <tx:method name="query*" read-only="true" />
      <tx:method name="list*" read-only="true" />
      <tx:method name="get*" read-only="true" />
      <tx:method name="select*" read-only="true" />
      <tx:method name="load*" read-only="true" />
      <tx:method name="find*" read-only="true" />
      <tx:method name="search*" read-only="true" />
      <tx:method name="read*" read-only="true" />
      <tx:method name="assert*" read-only="true" />
      <tx:method name="check*" read-only="true" />
      <tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
    </tx:attributes>
  </tx:advice>

  <bean id="dsChangeAdvice" class="code.ponfee.commons.data.MultipleDataSourceAdvisor" />

  <!-- 
    MultipleDataSourceAdvisor.doAround执行六次
    MultipleDataSourceAdvisor.invoke  执行六次
    MultipleDataSourceAspect.doAround 执行一次

    1、单独：
      MultipleDataSourceAdvisor.doAround：数据源切换正常
      MultipleDataSourceAdvisor.invoke  ：数据源切换正常
      MultipleDataSourceAspect.doAround ：数据源切换正常
      transaction-xml                   ：事务正常
      transaction-annotation            ：事务正常

    2、transaction-xml：<aop:config proxy-target-class="true">
      MultipleDataSourceAdvisor.doAround：数据源切换正常，事务正常√
      MultipleDataSourceAdvisor.invoke  ：数据源切换正常，事务无效×
      MultipleDataSourceAspect.doAround ：数据源切换无效，事务正常×

    3、transaction-xml：<aop:config proxy-target-class="false">
      MultipleDataSourceAdvisor.doAround：数据源切换无效，事务正常×
      MultipleDataSourceAdvisor.invoke  ：数据源切换无效，事务无效×
      MultipleDataSourceAspect.doAround ：数据源切换正常，事务正常√

    4、<tx:annotation-driven proxy-target-class="true">，<aop:config proxy-target-class="true">
      MultipleDataSourceAdvisor.doAround：数据源切换正常，事务正常√
      MultipleDataSourceAdvisor.invoke  ：数据源切换正常，事务无效×

    5、<tx:annotation-driven proxy-target-class="true">，<aop:config proxy-target-class="false">
      MultipleDataSourceAdvisor.doAround：数据源切换正常，事务正常√
      MultipleDataSourceAdvisor.invoke  ：数据源切换正常，事务无效×

    6、<tx:annotation-driven proxy-target-class="false">，<aop:config proxy-target-class="true">
      MultipleDataSourceAdvisor.doAround：数据源切换正常，事务正常√
      MultipleDataSourceAdvisor.invoke  ：数据源切换正常，事务无效×

    7、<tx:annotation-driven proxy-target-class="false">，<aop:config proxy-target-class="false">
      MultipleDataSourceAdvisor.doAround：数据源切换无效，事务正常×
      MultipleDataSourceAdvisor.invoke  ：数据源切换无效，事务无效×

    8、<tx:annotation-driven proxy-target-class="true">
      MultipleDataSourceAspect.doAround ：数据源切换正常，事务正常√

    9、<tx:annotation-driven proxy-target-class="false">
      MultipleDataSourceAspect.doAround ：数据源切换正常，事务正常√
   -->
  <aop:config proxy-target-class="true">
    <aop:pointcut id="dbTxMgrPointcut" expression="execution(public * cn.ponfee.web.framework.service.impl..*..*(..))" />
    <!-- 
      1、dsChangeAdvice invoke  ：<aop:advisor advice-ref="dsChangeAdvice" pointcut-ref="dbTxMgrPointcut" order="0" />
      2、dsChangeAdvice doAround：<aop:aspect ref="dsChangeAdvice" order="0"><aop:around method="doAround" pointcut-ref="dbTxMgrPointcut" /></aop:aspect>
      3、aop:advisor(txManageAdvice)必须在aop:aspect(dsChangeAdvice)前面，否则报错：发现了以元素'aop:advisor'开头的无效内容，应以'aop:aspect'之一开头
    -->
    <aop:advisor advice-ref="txManageAdvice" pointcut-ref="dbTxMgrPointcut" order="9" />
    <aop:aspect ref="dsChangeAdvice" order="0">
      <aop:around method="doAround" pointcut-ref="dbTxMgrPointcut" />
    </aop:aspect>
  </aop:config>

</beans>
